---
pagetitle: "Publications"
toc: false
bibliography: publications.bib
csl: apa.csl
nocite: |
  @*
execute:
  echo: false
  warning: false
  message: false
---

```{=html}
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="index.html">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Publications</li>
  </ol>
</nav>
```

This page lists all papers published by Dr. Girard, organized by year of publication. Click a paperâ€™s *title* to visit the publisher page and access the official version. Use *Abstract* to reveal the summary, *Citation* for the APA 7th-edition reference, and *BibTeX* to view the BibTeX entry. Clicking the link a second time will close the display again. *Preprint* links to a free author version (not the final typeset copy), and *Materials* leads to an open repository with data, code, and other open-science resources.

```{r setup}
library(tidyverse)
library(RefManageR)
library(htmltools)

`%||%` <- function(a, b) if (is.null(a) || length(a) == 0) b else a
nz_chr <- function(x) ifelse(is.na(x) | trimws(x) == "", NA_character_, x)

strip_braces <- function(x) {
  if (is.null(x) || length(x) == 0) return(NA_character_)
  y <- as.character(x)
  gsub("[{}]", "", y, perl = TRUE)
}

fmt_authors_card <- function(entry) {
  au <- entry$author
  if (is.null(au) || length(au) == 0) return(NA_character_)
  fmt_one <- function(a) {
    fam_vec <- a$family
    if (length(fam_vec)) paste(as.character(fam_vec), collapse = " ") else ""
  }
  pieces <- vapply(au, fmt_one, character(1))
  pieces <- pieces[nzchar(pieces)]
  if (!length(pieces)) return(NA_character_)
  if (length(pieces) == 1) pieces
  else paste(paste(pieces[-length(pieces)], collapse = ", "), "&", pieces[length(pieces)])
}

get_abstract <- function(entry) {
  abs <- entry$abstract %||% entry$annotation %||% NA_character_
  if (isTRUE(is.na(abs)) || !nzchar(abs)) NA_character_ else abs
}

get_bibtex <- function(entry) {
  out <- tryCatch({
    e <- entry
    if (!is.null(e$note)) e$note <- NULL
    if (!is.null(e$Note)) e$Note <- NULL
    txt <- paste0(utils::toBibtex(e), collapse = "\n")
    txt <- sub(",\\s*\\n?\\s*\\}$", "\n}", txt, perl = TRUE)
    txt <- gsub("\n{3,}", "\n\n", txt)
    txt
  }, error = function(err) NA_character_)
  if (is.na(out) || !nzchar(out)) NA_character_ else out
}

normalize_link <- function(x) {
  y <- as.character(x)
  y[is.na(y)] <- NA_character_
  y <- trimws(y)
  y[y == "" | tolower(y) == "na"] <- NA_character_

  ok <- !is.na(y)

  doi_pref <- ok & grepl("^doi:\\s*", y, ignore.case = TRUE)
  y[doi_pref] <- sub("^doi:\\s*", "", y[doi_pref], ignore.case = TRUE)
  bare_doi <- ok & grepl("^10\\.", y)
  y[bare_doi] <- paste0("https://doi.org/", y[bare_doi])

  arxiv_pref <- ok & grepl("^arxiv:\\s*", y, ignore.case = TRUE)
  if (any(arxiv_pref)) {
    ids <- sub("^arxiv:\\s*", "", y[arxiv_pref], ignore.case = TRUE)
    ids <- sub("^([^\\s]+).*", "\\1", ids)
    y[arxiv_pref] <- paste0("https://arxiv.org/abs/", ids)
  }

  domain_like <- ok & grepl("^(www\\.|[A-Za-z0-9.-]+\\.[A-Za-z]{2,})(/|$)", y)
  no_scheme   <- ok & !grepl("^https?://", y, ignore.case = TRUE)
  needs_scheme <- domain_like & no_scheme
  y[needs_scheme] <- paste0("https://", y[needs_scheme])

  y
}
```

```{r}
#| label: build-rows

bib  <- ReadBib("publications.bib", check = FALSE)
keys <- names(bib)

extra_links <- tibble(key = character(), preprint = character(), materials = character())

rows <- tibble(
  key   = keys,
  entry = lapply(keys, function(k) bib[k])
) |>
  mutate(
    title        = map_chr(entry, ~ strip_braces(.x$title %||% "")),
    authors_card = map_chr(entry, fmt_authors_card),
    year         = map_chr(entry, ~ {
      y <- .x$year %||% .x$date %||% ""
      if (is.list(y)) y$year %||% "" else as.character(y)
    }),
    venue        = map_chr(entry, ~ strip_braces(.x$journal %||% .x$booktitle %||% .x$publisher %||% "")),
    abstract     = map_chr(entry, get_abstract),
    bibtex       = map_chr(entry, get_bibtex),

    doi          = map_chr(entry, ~ .x$doi %||% NA_character_),
    url_fallback = map_chr(entry, ~ .x$url %||% NA_character_),

    preprint_raw  = map_chr(entry, ~ { v <- .x$preprint;  if (is.null(v) || length(v)==0) NA_character_ else as.character(v[[1]]) }),
    materials_raw = map_chr(entry, ~ { v <- .x$materials; if (is.null(v) || length(v)==0) NA_character_ else as.character(v[[1]]) }),

    has_preprint_key  = map_lgl(entry, ~ !is.null(.x$preprint)  && length(.x$preprint)  > 0),
    has_materials_key = map_lgl(entry, ~ !is.null(.x$materials) && length(.x$materials) > 0)
  ) |>
  left_join(extra_links, by = "key") |>
  mutate(
    preprint_val  = coalesce(preprint,  preprint_raw),
    materials_val = coalesce(materials, materials_raw)
  ) |>
  select(-any_of(c("preprint", "materials"))) |>
  mutate(
    preprint_url  = normalize_link(preprint_val),
    materials_url = normalize_link(materials_val)
  ) |>
  mutate(
    doi_url = normalize_link(
      if_else(
        nzchar(doi %||% ""),
        str_glue("https://doi.org/{doi}"),
        if_else(nzchar(preprint_url %||% ""), preprint_url, url_fallback)
      )
    ),
    year_num = suppressWarnings(as.integer(str_extract(year, "\\d{4}"))),
    year_lbl = ifelse(is.na(year_num), "n.d.", as.character(year_num))
  ) |>
  mutate(
    primary = map_lgl(entry, ~ tolower(as.character(.x$primary %||% "false")) == "true")
  ) |>
  arrange(desc(year_num), title)
```

```{css}
/* Hide the bibliography from quarto */
#quarto-bibliography,
#quarto-appendix .quarto-appendix-heading,
#quarto-appendix {
  display: none !important;
  border: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
}

/* Also hide the empty top-level <section id="bibliography"> Quarto emits */
section#bibliography.level1.unnumbered {
  display: none !important;
  border: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
}

/* Group header */
.year-group { margin: 28px 0 8px; }
.year-title { margin: 0; font-size: 1.35rem; border-bottom: 1px solid #e5e7eb; padding-bottom: 2px; }

/* Card + layout */
.pub-card {
  border: 1px solid #e5e7eb;
  border-radius: 14px;
  padding: 16px 16px 10px 16px;
  margin: 14px 0;
  background: #fff;
}
.pub-title { font-weight: 600; font-size: 1.05rem; margin-bottom: 4px; }
.pub-title a { text-decoration: none; }
.pub-meta  { color: #555; font-size: 0.95rem; margin-bottom: 8px; }

/* Actions row */
.pub-actions {
  display: flex; flex-wrap: wrap; gap: 8px 14px; align-items: center;
  margin-top: 8px; margin-bottom: 8px;
}
.pub-actions a {
  text-decoration: none; font-size: 0.92rem;
  border-bottom: 1px dotted #999; color: #0b66c3; cursor: pointer;
}
.pub-actions a.external { border-bottom-style: solid; }

/* Toggle area */
.toggle-area {
  display: none; position: relative;
  border: 1px solid #000; border-radius: 10px;
  padding: 12px 44px 12px 12px; background: #fafafa;
  margin-top: 10px; overflow: auto;
}
.toggle-area .panel-label {
  font-size: 0.82rem; color: #333; font-weight: 600;
  text-transform: uppercase; letter-spacing: 0.03em;
  opacity: 0.85; margin-bottom: 6px;
}
.toggle-area pre { white-space: pre-wrap; word-wrap: break-word; margin: 0; }
.toggle-area .content p { margin: 0 0 0.6em 0; }

/* Copy button */
.copy-btn {
  position: absolute; top: 6px; right: 6px;
  border: 1px solid #ddd; background: #fff; font-size: 0.85rem;
  padding: 4px 8px; border-radius: 6px; cursor: pointer;
}
.copy-btn:active { transform: translateY(1px); }
.copy-toast {
  position: absolute; top: 6px; right: 70px; font-size: 0.8rem;
  background: #333; color: #fff; padding: 3px 7px; border-radius: 6px; display: none;
}

/* Lab-led star on Abstract link */
.pub-actions .lab-star {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 0.9rem;
  line-height: 1;
  color: #ffb300;
  user-select: none;
}
.pub-actions .lab-star[role="img"] {
  cursor: default;
}
.pub-actions .lab-star .sr-only {
  position: absolute;
  width: 1px; height: 1px;
  padding: 0; margin: -1px; overflow: hidden;
  clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0;
}
```

```{=html}
<script>
(function() {
  function getCard(el) {
    while (el && !el.classList?.contains('pub-card')) el = el.parentNode;
    return el;
  }
  function showPanel(card, label, html, mode) {
    const area = card.querySelector('.toggle-area');
    const labelEl = area.querySelector('.panel-label');
    const contentEl = area.querySelector('.content');

    // Toggle: if clicking same action while open, collapse
    const current = area.getAttribute('data-current');
    if (current === mode && area.style.display === 'block') {
      area.style.display = 'none';
      area.setAttribute('data-current', '');
      return;
    }

    labelEl.textContent = label;
    if (mode === 'bib') {
      contentEl.innerHTML = '';
      const pre = document.createElement('pre');
      pre.textContent = html;
      contentEl.appendChild(pre);
    } else if (mode === 'abstract') {
      contentEl.textContent = html;
    } else {
      contentEl.innerHTML = html; // citation HTML
    }
    area.style.display = 'block';
    area.setAttribute('data-current', mode);
  }

  // Resource link handler (toggle)
  document.addEventListener('click', function(evt) {
    const a = evt.target.closest('a[data-action]');
    if (!a) return;
    const action = a.getAttribute('data-action');
    const card   = getCard(a);
    if (!card) return;
    evt.preventDefault();

    if (action === 'abstract' || action === 'citation' || action === 'bib') {
      const key = card.getAttribute('data-key');  // <-- Pandoc ref id suffix

      // Build label + payload
      let label = action === 'citation' ? 'Citation' : (action === 'bib' ? 'BibTeX' : 'Abstract');
      let html  = '';

      if (action === 'abstract') {
        const payloadEl = card.querySelector('.payload-abstract');
        const text = (payloadEl?.textContent || 'No abstract available.').trim();
        showPanel(card, label, text, 'abstract');
        return;
      }

      if (action === 'citation') {
        // Pull APA-formatted HTML from hidden #refs list: <div id="ref-KEY">
        const ref = document.querySelector('#ref-' + key);
        html = (ref ? ref.innerHTML : 'Citation unavailable.').trim();
        showPanel(card, label, html, 'citation');
        return;
      }

      if (action === 'bib') {
        const payloadEl = card.querySelector('.payload-bibtex');
        const text = (payloadEl?.textContent || 'No BibTeX available.').trim();
        showPanel(card, label, text, 'bib');
        return;
      }
    }
  }, false);

  // Copy button
  document.addEventListener('click', function(evt) {
    const btn = evt.target.closest('.copy-btn');
    if (!btn) return;
    const card = getCard(btn);
    const area = card.querySelector('.toggle-area');
    const contentEl = area.querySelector('.content');

    let textToCopy = '';
    const pre = contentEl.querySelector('pre');
    if (pre) textToCopy = pre.textContent;
    else textToCopy = contentEl.innerText;

    navigator.clipboard.writeText(textToCopy).then(() => {
      const toast = area.querySelector('.copy-toast');
      toast.style.display = 'inline-block';
      setTimeout(() => { toast.style.display = 'none'; }, 1200);
    }).catch(() => {
      const ta = document.createElement('textarea');
      ta.value = textToCopy;
      document.body.appendChild(ta);
      ta.select();
      try { document.execCommand('copy'); } catch (e) {}
      document.body.removeChild(ta);
    });
  }, false);
})();
</script>
```

```{r}
#| label: render-publications

build_card <- function(
  key, entry, title, authors_card, year, venue,
  abstract, bibtex,
  preprint_url = NA_character_, materials_url = NA_character_,
  doi_url = NA_character_, primary = FALSE, ...
) {
  has_preprint_key  <- !is.null(entry$preprint)  && length(entry$preprint)  > 0
  has_materials_key <- !is.null(entry$materials) && length(entry$materials) > 0

  payloads <- tags$div(
    style = "display:none;",
    tags$div(class = "payload-abstract", abstract %||% ""),
    tags$div(class = "payload-bibtex",  bibtex   %||% "")
  )

  ttl_node <- if (isTRUE(nzchar(doi_url %||% ""))) {
    tags$div(class = "pub-title", tags$a(title, href = doi_url, target = "_blank", rel = "noopener"))
  } else {
    tags$div(class = "pub-title", title)
  }

  meta <- tags$div(
    class = "pub-meta",
    if (nzchar(authors_card %||% "")) {
      tagList(HTML(authors_card), tags$br())
    } else {
      NULL
    },
    tagList(if (nzchar(venue %||% "")) tags$em(venue) else NULL)
  )

  actions <- tags$div(
    class = "pub-actions",
    # Standalone star badge (only if primary)
    if (isTRUE(primary)) tags$span(
      class = "lab-star",
      role  = "img",
      title = "This project was led by the AffCom lab",
      `aria-label` = "This project was led by the AffCom lab",
      "â˜…",
      tags$span(class = "sr-only", " This project was led by the AffCom lab")
    ),
    # Action links
    tags$a("Abstract", href = "#", `data-action`="abstract", role="button"),
    tags$a("Citation", href = "#", `data-action`="citation", role="button"),
    tags$a("BibTeX",   href = "#", `data-action`="bib",      role="button"),
    if (isTRUE(has_preprint_key))
      tags$a("Preprint", class = "external", href = (preprint_url %||% "#"), target = "_blank", rel="noopener"),
    if (isTRUE(has_materials_key))
      tags$a("Materials", class = "external", href = (materials_url %||% "#"), target = "_blank", rel="noopener")
  )

  toggle_panel <- tags$div(
    class = "toggle-area",
    `data-current` = "",
    tags$button(class = "copy-btn", "Copy"),
    tags$span(class = "copy-toast", "Copied!"),
    tags$div(class = "panel-label", "â€”"),
    tags$div(class = "content")
  )

  tags$div(class = "pub-card", `data-key` = key, ttl_node, meta, actions, toggle_panel, payloads)
}

years <- rows |>
  distinct(year_lbl, year_num) |>
  arrange(desc(year_num), desc(year_lbl)) |>
  pull(year_lbl)

groups <- lapply(years, function(y) {
  subset <- rows |> filter(year_lbl == y)

  subset_min <- subset |>
    select(
      key, entry, title, authors_card, year, venue,
      abstract, bibtex,
      preprint_url, materials_url, doi_url, primary
    )
  cards <- pmap(subset_min, build_card)

  tags$div(
    class = "year-group",
    tags$h2(class = "year-title anchored", id = paste0("y-", y), y),
    tags$div(cards)
  )
})

browsable(tags$div(groups))
```
