{
  "hash": "f2a4d1fdda258dc362ace1ce723fa306",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AI Transcription from R using Whisper: Part 3\"\ndescription: \"Easing the WSL2 Setup with Docker\"\nauthor: \"Jeffrey Girard\"\ndate: \"2024-11-10\"\nimage: whisper.webp\ndraft: false\ncategories:\n  - teaching\n  - audio\n  - AI\ncomments:\n  utterances: \n    repo: jmgirard/affcomlab\n    label: whisper2024c\n---\n\n\n\n::: {.callout-note}\nYou can view this blog post as a replacement for [the previous one](../whisper2024b/index.qmd) (unless you are interested in all the nitty-gritty details).\n:::\n\n## Introduction\n\nIn a [previous blog post](../whisper2024b/index.qmd) on AI Transcription, I discussed the performance benefits of moving to WSL2 for CUDA support on Windows. However, the process of setting up and using the virtual machine was very technical, which may be a barrier for many users. In this blog post, I will discuss the use of a technology called Docker to ease the setup and use of WSL2.\n\nDocker is a tool that makes it easy to package and run applications in a \"container,\" which is a lightweight, standalone environment that includes everything an application needs to run. This way, the application will work the same way on any computer without worrying about setup or compatibility issues. \n\nThere are three main components to Docker: a Dockerfile, a Docker image, and a Docker container. To explain these, I will use a pizza analogy. Just like a chef might create a recipe that contains step-by-step instructions for preparing a pizza, a power user might create a **Dockerfile** that contains detailed and reproducible instructions for building and configuring a software environment. This recipe might then be followed in a food processing plant to produce many identical pizzas, which are then frozen for re-sale. Similarly, the Dockerfile instructions might be followed to \"build\" a **Docker image,** which contains all the resulting files and settings. Finally, a customer might purchase a frozen pizza, bring it home, and reheat it in their own oven for consumption. In much the same way, a user might download or \"pull\" a Docker image from the internet and \"run\" it as a **Docker container** on their own computer to use the desired application. The benefit of this approach is that the customer/user doesn't need to understand or even know about the recipe/Dockerfile instructions to enjoy the pizza/container! \n\nI have played the role of chef or power user here and condensed the instructions from my previous blog post into a Dockerfile and built it into a Docker image that you can easily pull and run.\n\nBefore we dive into things, I'll provide a brief overview of all the steps. \n\n1. Check that our computer's hardware supports CUDA\n1. Install/update the NVIDIA graphics driver on Windows\n1. Install Docker Desktop on Windows\n1. Pull the preconfigured Docker image\n1. Run the Docker image with GPU support\n1. Log into RStudio Server and use audio.whisper\n\n## Check for CUDA Support\n\nThis post assumes that you are using the Windows operating system and that your computer's graphics card supports [CUDA](https://developer.nvidia.com/cuda-faq). To check that this is the case, first look up your graphics card's model number. An easy way to do this on Windows 10/11 is to click on the desktop search bar (bottom-left of the screen next to the windows icon) and type in \"Device Manager.\" Then click the arrow next to \"Display adapters\" and find your graphics card's model name. On my computer, it says \"NVIDIA GeForce RTX 2060.\" Then go to  [this link](https://developer.nvidia.com/cuda-gpus) and click the \"CUDA-Enabled NVIDIA Quadro and NVIDIA RTX\" and \"CUDA-Enabled GeForce and TITAN Products\" blocks to open their accordions. Then search for your graphics card's model number (the left tables are for desktop cards and the right tables are for notebook cards). I found \"GeForce RTX 2060\" on the list under GeForce and TITAN Products with a compute capability of 7.5. Thus, my card is supported!\n\n## Install the Latest NVIDIA Graphics Driver\n\nDownload and install the latest graphics driver for your card from [NVIDIA](https://www.nvidia.com/Download/index.aspx#). The previous step described how to find your graphics card model name, which you'll need to navigate to. You should choose the Game Ready version. Note that you should *not* install the CUDA toolkit on Windows as doing so may confuse things and lead to issues later on (as Docker will install the CUDA toolkit for WSL).\n\n## Install the Latest Version of Docker Desktop\n\nDownload and install the latest version of [Docker Desktop](https://www.docker.com/products/docker-desktop/) for Windows. If you are unsure of whether you have AMD64 or ARM64, open a Command Prompt window and enter `echo %PROCESSOR_ARCHITECTURE%`. If the installer asks you whether you want to install or use WSL2 integration, select Yes.\n\n## Pull the wsl-cuda-whisper Docker image\n\nOpen the Docker Desktop application and click the Terminal button on the bottom. If it asks you to confirm/enable this, click yes. \n\nIn the Docker terminal, enter `docker pull jmgirard/wsl-cuda-whisper`.\n\nThis will take some time and disk space to download. If you are concerned at all about security, you can see the Dockerfile instructions [here](https://github.com/jmgirard/wsl-cuda-whisper/blob/main/Dockerfile); it just installs rocker/tidyverse (i.e., Ubuntu, R, RStudio Server, and the tidyverse R packages), and then ffmpeg, CUDA Toolkit, and the audio.* R packages.\n\n## Run the wsl-cuda-whisper Docker image\n\nOnce the download is complete, you can run the image to access RStudio with audio.whisper and CUDA support. To run an image, we can use a command like `docker run [options] image-name`. We will use `jmgirard/wsl-cuda-whisper` as our image name, but we need to learn several options to get the most out of this.\n\n- `--gpus all` tells Docker to grant the container access to our NVIDIA graphics card, which is necessary for us to make use of CUDA.\n- `-p 8787:8787` tells Docker to host the container's RStudio Server on network port 8787, which will let us access it from a browser on Windows.\n- `-e PASSWORD=[password]` tells Docker to set the password for the RStudio Server to whatever we replace `[password]` with (e.g., `abc`). The username will be `rstudio`.\n- `-v \"[winpath]:/win\"` will make whatever folder we replace `[winpath]` with (e.g., `C:\\Users\\jeffg`) accessible to the container as `/win` (or whatever we put at the end).\n- `--rm` tells Docker to delete the container after it is closed, which can help save space in the long run\n- `-it` tells Docker to run the container \"interactively\" so that messages from the container will be shown in the Docker terminal, which can be helpful to tell when the RStudio server is ready for use\n\nPutting this all together, we can enter this into the Docker terminal:\n\n`docker run --gpus all -p 8787:8787 -e PASSWORD=abc -v \"C:\\Users\\jeffg:/win\" --rm -it jmgirard/wsl-cuda-whisper`\n\nThe Docker terminal will show the progress of R installing the audio.whisper package (unfortunately this can't be done ahead of time). You will know the server is ready for use when the terminal says \"TTY detected.\"\n\n## Open the Container's RStudio Server from Windows\nIn Docker Desktop, click the Containers tab on the left and click the \"8787:8787\" link next to your new container under the Ports column. This will open a web browser on Windows and direct it to <http://localhost:8787> (or you could also just paste this into your favorite browser manually or even make a desktop shortcut for it). Enter `rstudio` as the Username and whatever you set as the Password above (e.g., `abc` in the example code).\n\n## Use RStudio Server to Run Whisper\n\nIn the R console, load the audio.whisper package and try it out on the JFK clip that took so long to process in the previous blog post. Note that there will be one important change to the commands from before. This time, when we load the model using the `whisper()` function, we will add the `use_gpu = TRUE` argument.\n\n```r\n# Load the package from library\nlibrary(audio.whisper)\n\n# Download or load from file the desired model (with GPU support)\nmodel <- whisper(\"base\", use_gpu = TRUE)\n\n# Construct file path to example audio file in package data\njfk <- system.file(package = \"audio.whisper\", \"samples\", \"jfk.wav\")\n\n# Run English transcription using the downloaded whisper model\nout <- predict(model, newdata = jfk, language = \"en\")\n\n# Print transcript\nout$data\n```\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> segment </th>\n   <th style=\"text-align:right;\"> segment_offset </th>\n   <th style=\"text-align:left;\"> from </th>\n   <th style=\"text-align:left;\"> to </th>\n   <th style=\"text-align:left;\"> text </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 00:00:00.000 </td>\n   <td style=\"text-align:left;\"> 00:00:07.600 </td>\n   <td style=\"text-align:left;\"> And so my fellow Americans, ask not what your country can do for you, </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 00:00:07.600 </td>\n   <td style=\"text-align:left;\"> 00:00:10.600 </td>\n   <td style=\"text-align:left;\"> ask what you can do for your country. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nThe results look good/the same as before, but check out the timing!\n\nInstead of 20.988 minutes, it took 0.007 minutes...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout$timing\n## $transcription_start\n## [1] \"2024-11-10 12:34:19 CST\"\n## \n## $transcription_end\n## [1] \"2024-11-10 12:34:20 CST\"\n## \n## $transcription_duration\n## Time difference of 0.006911568 mins\n```\n:::\n\n\n\nIf we wanted to save the transcript back to Windows, we could use the following approach. To save the entire list object generated by `predict()` for later use in R, we could use `saveRDS(out, file = \"/win/jfk.rds\")`. Or, to save just the transcript for human consumption, we could use `write.csv(out$data, file = \"jfk.csv\")`.\n\n## Wrap-up\n\nThat wraps up this blog post. In the next part, I will discuss more practical aspects of using this technology. For example, I'll talk about how to generate a list of audio/videos files on your hard drive (or elsewhere) and then iterate over them to create transcripts from many files all at once.\n\n*Part 4 coming soon...*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}